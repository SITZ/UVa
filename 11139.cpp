#include <bits/stdc++.h>

using namespace std;

#if 0

int gcd[128][128];

// Returns number of lattice points on the boundary of given triangle
// The triangle should have a non-zero area.
int Boundary(int x1, int y1, int x2, int y2, int x3, int y3)
{
	int B = gcd[abs(x2-x1)][abs(y2-y1)];
	B += gcd[abs(x3-x1)][abs(y3-y1)];
	B += gcd[abs(x3-x2)][abs(y3-y2)];
	return B;
}

// Returns doubled signed area of the lattice triangle
int Area2(int x1, int y1, int x2, int y2, int x3, int y3)
{
	return ((x2-x1)*(y3-y1) - (x3-x1)*(y2-y1));
}

// Returns number of lattice points inside given triangle
int Internal(int x1, int y1, int x2, int y2, int x3, int y3)
{
	// Pick's theorem: A = I + B/2 - 1, or: I = (2A - B + 2) / 2
	int res = (abs(Area2(x1,y1,x2,y2,x3,y3)) - Boundary(x1,y1,x2,y2,x3,y3) + 2) / 2;
	return res;
}

long long C(int n, int k)
{
	if(k == 0)
	{
		return 1;
	}
	if(k > n)
	{
		return 0;
	}
	return C(n, k-1) * (n-k+1) / k;
}

int main()
{
	for(int n = 0; n < 128; n++)
	{
		for(int m = 0; m < 128; m++)
		{
			if(n == 0 || m == 0)
			{
				gcd[n][m] = (n == 0 ? m : n);
			}
			else if(m < n)
			{
				gcd[n][m] = gcd[m][n];
			}
			else
			{
				gcd[n][m] = gcd[m%n][n];
			}
		}
	}
	for(int n = 1; n <= 120; n++)
	{
		// Base: (n+1)^2 choose 4
		long long res = C((n+1)*(n+1), 4);
		// Remove quads in which all 4 points lie on the same line
		for(int dy = 0; dy <= n; dy++)
		{
			for(int dx = -n; dx <= n; dx++)
			{
				if(dy == 0 && dx <= 0)
				{
					continue;
				}
				long long c = (n+1-dy)*(n+1-abs(dx));
				res -= c * C(gcd[dy][abs(dx)]-1, 2);
			}
		}
		for(int y1 = 0, x1 = 0; x1 <= n; x1++)
			for(int x2 = 0; x2 <= n; x2++)
				for(int x3 = 0; x3 <= n; x3++)
				{
					// Thanks to this constraint, the body of this loop is
					// executed only O(n^2) times.
					if(x1 != 0 && x2 != 0 && x3 != 0)
					{
						continue;
					}
					for(int y2 = y1; y2 <= n; y2++)
					{
						if(y1 == y2 && x1 >= x2)
						{
							continue;
						}
						for(int y3 = y2; y3 <= n; y3++)
						{
							if(y2 == y3 && x2 >= x3)
							{
								continue;
							}
							//The following should be already true
							//if (min(x1, min(x2, x3)) != 0) continue;
							//if (min(y1, min(y2, y3)) != 0) continue;
							if(Area2(x1,y1,x2,y2,x3,y3) == 0)
							{
								continue;
							}
							int w = max(x1, max(x2, x3));
							int h = max(y1, max(y2, y3));
							long long c = (n+1LL-w)*(n+1LL-h);
							res -= c * (Boundary(x1,y1,x2,y2,x3,y3)-3);
							res += c * Internal(x1,y1,x2,y2,x3,y3) * (-1 + 3);
						}
					}
				}
		printf("/*%d*/ \"%lld\",\n", n, res);
		fflush(stdout);
	}
}

#endif

int main()
{
	char *ans[] = {"0",
								 /*1*/ "1",
								 /*2*/ "94",
								 /*3*/ "1758",
								 /*4*/ "13698",
								 /*5*/ "70539",
								 /*6*/ "266320",
								 /*7*/ "837060",
								 /*8*/ "2260984",
								 /*9*/ "5460657",
								 /*10*/ "12046294",
								 /*11*/ "24775158",
								 /*12*/ "47847538",
								 /*13*/ "87967579",
								 /*14*/ "154764912",
								 /*15*/ "262110940",
								 /*16*/ "429480216",
								 /*17*/ "684015621",
								 /*18*/ "1061192670",
								 /*19*/ "1609449754",
								 /*20*/ "2390049498",
								 /*21*/ "3483126407",
								 /*22*/ "4990472864",
								 /*23*/ "7041050760",
								 /*24*/ "9791130320",
								 /*25*/ "13438691713",
								 /*26*/ "18223150622",
								 /*27*/ "24435137362",
								 /*28*/ "32422957058",
								 /*29*/ "42610456831",
								 /*30*/ "55488070008",
								 /*31*/ "71653253880",
								 /*32*/ "91793056040",
								 /*33*/ "116718542113",
								 /*34*/ "147374255430",
								 /*35*/ "184850702510",
								 /*36*/ "230399012010",
								 /*37*/ "285487491835",
								 /*38*/ "351770674200",
								 /*39*/ "431140718212",
								 /*40*/ "525737274208",
								 /*41*/ "638028826789",
								 /*42*/ "770742660630",
								 /*43*/ "927021702914",
								 /*44*/ "1110333974314",
								 /*45*/ "1324584379067",
								 /*46*/ "1574168092008",
								 /*47*/ "1863985132716",
								 /*48*/ "2199400376080",
								 /*49*/ "2586484878529",
								 /*50*/ "3031882471694",
								 /*51*/ "3542983783278",
								 /*52*/ "4127906237474",
								 /*53*/ "4795667546635",
								 /*54*/ "5556032576528",
								 /*55*/ "6419836537428",
								 /*56*/ "7398860557112",
								 /*57*/ "8506094916941",
								 /*58*/ "9755681626382",
								 /*59*/ "11163074675546",
								 /*60*/ "12744831674354",
								 /*61*/ "14519383177831",
								 /*62*/ "16506465753352",
								 /*63*/ "18727437208180",
								 /*64*/ "21205528017584",
								 /*65*/ "23965877539197",
								 /*66*/ "27035496497750",
								 /*67*/ "30443854956002",
								 /*68*/ "34222324718274",
								 /*69*/ "38404887184703",
								 /*70*/ "43027849371592",
								 /*71*/ "48130693448624",
								 /*72*/ "53755057174408",
								 /*73*/ "59946428484041",
								 /*74*/ "66752984294358",
								 /*75*/ "74226200735918",
								 /*76*/ "82421333732930",
								 /*77*/ "91397394819691",
								 /*78*/ "101217116203904",
								 /*79*/ "111948024726748",
								 /*80*/ "123661057327752",
								 /*81*/ "136432577125309",
								 /*82*/ "150343660737614",
								 /*83*/ "165480557290802",
								 /*84*/ "181933824163210",
								 /*85*/ "199800966901783",
								 /*86*/ "219184984267936",
								 /*87*/ "240194858791736",
								 /*88*/ "262945718824768",
								 /*89*/ "287560501305681",
								 /*90*/ "314167401731182",
								 /*91*/ "342903811014758",
								 /*92*/ "373914064115850",
								 /*93*/ "407350852787219",
								 /*94*/ "443375227121768",
								 /*95*/ "482156764012932",
								 /*96*/ "523873558838176",
								 /*97*/ "568715409359421",
								 /*98*/ "616880048353382",
								 /*99*/ "668576152839750",
								 /*100*/ "724023049675018",
								 /*101*/ "783452989688499",
								 /*102*/ "847107440973432",
								 /*103*/ "915242542968876",
								 /*104*/ "988124570367008",
								 /*105*/ "1066033809345013",
								 /*106*/ "1149265943085894",
								 /*107*/ "1238130202341666",
								 /*108*/ "1332947863674570",
								 /*109*/ "1434059888780911",
								 /*110*/ "1541819141887696",
								 /*111*/ "1656597872383320",
								 /*112*/ "1778782903999392",
								 /*113*/ "1908782535144553",
								 /*114*/ "2047019271291934",
								 /*115*/ "2193937426760166",
								 /*116*/ "2349999850474066",
								 /*117*/ "2515689641198367",
								 /*118*/ "2691512617349032",
								 /*119*/ "2877994834324016",
								 /*120*/ "3075682094608520"};
	int n;
	while (scanf("%d", &n) == 1 && n > 0)
	{
		printf("%d %s\n", n, ans[n]);
	}
}
